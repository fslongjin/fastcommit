use indicatif::{ProgressBar, ProgressStyle};
use rand::seq::SliceRandom;
use std::time::Duration;

const RANDOM_PHRASES: &[&str] = &[
    "ü§î Ê≠£Âú®ÊÄùËÄÉÂ¶Ç‰Ωï‰ºòÈõÖÂú∞ÊèèËø∞ËøôÊ¨°ÂèòÊõ¥...",
    "‚ú® È≠îÊ≥ïÊ≠£Âú®ÂèëÁîüÔºåËØ∑Á®çÂÄô...",
    "üöÄ Âä†ÈÄü‰ª£Á†ÅÊèê‰∫§‰∏≠...",
    "üß† AIÂ§ßËÑëÊ≠£Âú®ÁñØÁãÇËøêËΩ¨...",
    "üåà ÁîüÊàêÂΩ©ËôπËà¨Áªö‰∏ΩÁöÑÊèê‰∫§‰ø°ÊÅØ...",
    "‚ö° Èó™ÁîµËà¨Âø´ÈÄüÂàÜÊûê‰ª£Á†Å...",
    "üé® ‰∏∫‰Ω†ÁöÑ‰ª£Á†ÅÊ∑ªÂä†Ëâ∫ÊúØÊ∞îÊÅØ...",
    "üï∫ Gee Kee Tai May! Oh BabyÔºÅ ",
    "üíÉ Gee Kee ÂÆûÂú®ÊòØÂ§™ÁæéÔºÅ ",
    "üé™ ‰ª£Á†ÅÈ©¨ÊàèÂõ¢Ë°®Êºî‰∏≠...",
    "üçµ ÂñùÊùØËå∂ÔºåÈ©¨‰∏äÂ∞±Â•Ω...",
    "üé∏ ‰∏∫‰ª£Á†ÅÂèòÊõ¥Ë∞±ÂÜô‰πêÁ´†...",
    "üèéÔ∏è  ÊûÅÈÄü‰ª£Á†ÅÂàÜÊûê‰∏≠...",
    "üé≠ ÊàèÂâßÂåñÂú∞ÊèèËø∞‰Ω†ÁöÑÂèòÊõ¥...",
    "üåå Âú®‰ª£Á†ÅÂÆáÂÆô‰∏≠Êé¢Á¥¢ing...",
];

pub struct Spinner {
    pb: ProgressBar,
}

impl Spinner {
    pub fn new() -> Self {
        let pb = ProgressBar::new_spinner();
        pb.set_style(
            ProgressStyle::default_spinner()
                .tick_strings(&["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"])
                .template("{spinner:.cyan} {msg:.dim}")
                .unwrap(),
        );
        pb.enable_steady_tick(Duration::from_millis(100));

        Self { pb }
    }

    pub async fn start_with_random_messages(&self) {
        let pb = self.pb.clone();
        tokio::spawn(async move {
            let mut interval = tokio::time::interval(Duration::from_secs(2));
            loop {
                interval.tick().await;
                let mut rng = rand::thread_rng();
                if let Some(phrase) = RANDOM_PHRASES.choose(&mut rng) {
                    pb.set_message(phrase.to_string());
                }
            }
        });
    }

    #[allow(dead_code)]
    pub fn finish_with_message(&self, message: &str) {
        self.pb.finish_with_message(message.to_string());
    }

    pub fn finish(&self) {
        self.pb.finish_and_clear();
    }
}

impl Drop for Spinner {
    fn drop(&mut self) {
        self.finish();
    }
}
